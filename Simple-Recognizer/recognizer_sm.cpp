//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : recognizer.sm
//

#include "FSMSolution.h"
#include "recognizer_sm.h"

using namespace statemap;

// Static class declarations.
FSMMap_Start FSMMap::Start( "FSMMap::Start",0 );
FSMMap_Static_part FSMMap::Static_part( "FSMMap::Static_part",1 );
FSMMap_Name FSMMap::Name( "FSMMap::Name",2 );
FSMMap_Size FSMMap::Size( "FSMMap::Size",3 );
FSMMap_Hash FSMMap::Hash( "FSMMap::Hash",4 );
FSMMap_Ending FSMMap::Ending( "FSMMap::Ending",5 );
FSMMap_OK FSMMap::OK( "FSMMap::OK",6 );
FSMMap_Error FSMMap::Error( "FSMMap::Error",7 );

void FSMSolutionState::EOS( recognizerContext<FSMSolution>& context )
{
	Default( context );
}

void FSMSolutionState::symb( recognizerContext<FSMSolution>& context,char c )
{
	Default( context );
}

void FSMSolutionState::Default( recognizerContext<FSMSolution>& context )
{
	throw (
		TransitionUndefinedException(
			context.getState().getName(),
			context.getTransition() ));

}

void FSMMap_Default::EOS( recognizerContext<FSMSolution>& context )
{
	FSMSolution& ctxt = context.getOwner();

	context.getState().Exit( context );
	context.clearState();
	try
	{
		ctxt.Unacceptable();
		context.setState( FSMMap::Error );
	}
	catch ( ... )
	{
		context.setState( FSMMap::Error );
		throw;
	}
	context.getState().Entry( context );

}

void FSMMap_Default::symb( recognizerContext<FSMSolution>& context,char c )
{
	FSMSolution& ctxt = context.getOwner();

	context.getState().Exit( context );
	context.clearState();
	try
	{
		ctxt.Unacceptable();
		context.setState( FSMMap::Error );
	}
	catch ( ... )
	{
		context.setState( FSMMap::Error );
		throw;
	}
	context.getState().Entry( context );

}

void FSMMap_Start::symb( recognizerContext<FSMSolution>& context,char c )
{
	FSMSolution& ctxt = context.getOwner();

	if ( c == 'e' )
	{
		context.getState().Exit( context );
		context.clearState();
		try
		{
			ctxt.BufferAdd( c );
			context.setState( FSMMap::Static_part );
		}
		catch ( ... )
		{
			context.setState( FSMMap::Static_part );
			throw;
		}
		context.getState().Entry( context );
	}
	else
	{
		FSMMap_Default::symb( context,c );
	}

}

void FSMMap_Static_part::symb( recognizerContext<FSMSolution>& context,char c )
{
	FSMSolution& ctxt = context.getOwner();

	if ( ctxt.BufferValidStatic() && !ctxt.BufferFullStatic() )
	{
		context.getState().Exit( context );
		context.clearState();
		try
		{
			ctxt.BufferAdd( c );
			context.setState( FSMMap::Static_part );
		}
		catch ( ... )
		{
			context.setState( FSMMap::Static_part );
			throw;
		}
		context.getState().Entry( context );
	}
	else if ( c == '|' && ctxt.BufferFullStatic() )

	{
		context.getState().Exit( context );
		context.clearState();
		try
		{
			ctxt.ResetBuffer();
			context.setState( FSMMap::Name );
		}
		catch ( ... )
		{
			context.setState( FSMMap::Name );
			throw;
		}
		context.getState().Entry( context );
	}
	else
	{
		FSMMap_Default::symb( context,c );
	}

}

void FSMMap_Name::symb( recognizerContext<FSMSolution>& context,char c )
{
	FSMSolution& ctxt = context.getOwner();

	if ( (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') ||
		c == '_' || c == '+' || c == '-' )
	{
		context.getState().Exit( context );
		context.clearState();
		try
		{
			ctxt.CounterTick();
			context.setState( FSMMap::Name );
		}
		catch ( ... )
		{
			context.setState( FSMMap::Name );
			throw;
		}
		context.getState().Entry( context );
	}
	else if ( c == '|' && (ctxt.CounterState() > 0) )

	{
		context.getState().Exit( context );
		context.clearState();
		try
		{
			ctxt.ResetCounter();
			context.setState( FSMMap::Size );
		}
		catch ( ... )
		{
			context.setState( FSMMap::Size );
			throw;
		}
		context.getState().Entry( context );
	}
	else
	{
		FSMMap_Default::symb( context,c );
	}

}

void FSMMap_Size::symb( recognizerContext<FSMSolution>& context,char c )
{
	FSMSolution& ctxt = context.getOwner();

	if ( c >= '0' && c <= '9' )
	{
		FSMSolutionState& endState = context.getState();

		context.clearState();
		try
		{
			ctxt.CounterTick();
			context.setState( endState );
		}
		catch ( ... )
		{
			context.setState( endState );
			throw;
		}
	}
	else if ( c == '|' && (ctxt.CounterState() > 0) )

	{
		context.getState().Exit( context );
		context.clearState();
		try
		{
			ctxt.ResetCounter();
			context.setState( FSMMap::Hash );
		}
		catch ( ... )
		{
			context.setState( FSMMap::Hash );
			throw;
		}
		context.getState().Entry( context );
	}
	else
	{
		FSMMap_Default::symb( context,c );
	}

}

void FSMMap_Hash::symb( recognizerContext<FSMSolution>& context,char c )
{
	FSMSolution& ctxt = context.getOwner();

	if ( ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) && (ctxt.CounterState() < 32) )
	{
		context.getState().Exit( context );
		context.clearState();
		try
		{
			ctxt.CounterTick();
			context.setState( FSMMap::Hash );
		}
		catch ( ... )
		{
			context.setState( FSMMap::Hash );
			throw;
		}
		context.getState().Entry( context );
	}
	else if ( c == '|' && (ctxt.CounterState() == 32) )

	{
		context.getState().Exit( context );
		context.clearState();
		try
		{
			ctxt.ResetCounter();
			context.setState( FSMMap::Ending );
		}
		catch ( ... )
		{
			context.setState( FSMMap::Ending );
			throw;
		}
		context.getState().Entry( context );
	}
	else
	{
		FSMMap_Default::symb( context,c );
	}

}

void FSMMap_Ending::symb( recognizerContext<FSMSolution>& context,char c )
{
	FSMSolution& ctxt = context.getOwner();

	if ( c == '/' )
	{
		context.getState().Exit( context );
		context.clearState();
		try
		{
			ctxt.Acceptable();
			context.setState( FSMMap::OK );
		}
		catch ( ... )
		{
			context.setState( FSMMap::OK );
			throw;
		}
		context.getState().Entry( context );
	}
	else
	{
		FSMMap_Default::symb( context,c );
	}

}

void FSMMap_OK::EOS( recognizerContext<FSMSolution>& context )
{
	FSMSolution& ctxt = context.getOwner();

	FSMSolutionState& endState = context.getState();

	context.clearState();
	try
	{
		ctxt.Acceptable();
		context.setState( endState );
	}
	catch ( ... )
	{
		context.setState( endState );
		throw;
	}

}

void FSMMap_Error::symb( recognizerContext<FSMSolution>& context,char c )
{
	FSMSolution& ctxt = context.getOwner();

	FSMSolutionState& endState = context.getState();

	context.clearState();
	try
	{
		ctxt.Unacceptable();
		context.setState( endState );
	}
	catch ( ... )
	{
		context.setState( endState );
		throw;
	}

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
