//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : FSMSolution.sm
//

#ifndef FSMSOLUTION_SM_H
#define FSMSOLUTION_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class FSMMap;
class FSMMap_Init;
class FSMMap_Name;
class FSMMap_Bar_size;
class FSMMap_Size;
class FSMMap_Bar_hash;
class FSMMap_Hash;
class FSMMap_Bar_end;
class FSMMap_OK;
class FSMMap_Error;
class FSMMap_Default;
class FSMSolutionState;
template<typename DERIVED> class FSMSolutionContext;
class FSMSolution;

class FSMSolutionState :
    public statemap::State
{
public:

    FSMSolutionState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(FSMSolutionContext<FSMSolution>&) {};
    virtual void Exit(FSMSolutionContext<FSMSolution>&) {};

    virtual void EOS(FSMSolutionContext<FSMSolution>& context);
    virtual void symb(FSMSolutionContext<FSMSolution>& context, char c);

protected:

    virtual void Default(FSMSolutionContext<FSMSolution>& context);
};

class FSMMap
{
public:

    static FSMMap_Init Init;
    static FSMMap_Name Name;
    static FSMMap_Bar_size Bar_size;
    static FSMMap_Size Size;
    static FSMMap_Bar_hash Bar_hash;
    static FSMMap_Hash Hash;
    static FSMMap_Bar_end Bar_end;
    static FSMMap_OK OK;
    static FSMMap_Error Error;
};

class FSMMap_Default :
    public FSMSolutionState
{
public:

    FSMMap_Default(const char * const name, const int stateId)
    : FSMSolutionState(name, stateId)
    {};

    virtual void EOS(FSMSolutionContext<FSMSolution>& context);
    virtual void symb(FSMSolutionContext<FSMSolution>& context, char c);
};

class FSMMap_Init :
    public FSMMap_Default
{
public:
    FSMMap_Init(const char * const name, const int stateId)
    : FSMMap_Default(name, stateId)
    {};

    virtual void symb(FSMSolutionContext<FSMSolution>& context, char c);
};

class FSMMap_Name :
    public FSMMap_Default
{
public:
    FSMMap_Name(const char * const name, const int stateId)
    : FSMMap_Default(name, stateId)
    {};

    virtual void symb(FSMSolutionContext<FSMSolution>& context, char c);
};

class FSMMap_Bar_size :
    public FSMMap_Default
{
public:
    FSMMap_Bar_size(const char * const name, const int stateId)
    : FSMMap_Default(name, stateId)
    {};

    virtual void symb(FSMSolutionContext<FSMSolution>& context, char c);
};

class FSMMap_Size :
    public FSMMap_Default
{
public:
    FSMMap_Size(const char * const name, const int stateId)
    : FSMMap_Default(name, stateId)
    {};

    virtual void symb(FSMSolutionContext<FSMSolution>& context, char c);
};

class FSMMap_Bar_hash :
    public FSMMap_Default
{
public:
    FSMMap_Bar_hash(const char * const name, const int stateId)
    : FSMMap_Default(name, stateId)
    {};

    virtual void symb(FSMSolutionContext<FSMSolution>& context, char c);
};

class FSMMap_Hash :
    public FSMMap_Default
{
public:
    FSMMap_Hash(const char * const name, const int stateId)
    : FSMMap_Default(name, stateId)
    {};

    virtual void symb(FSMSolutionContext<FSMSolution>& context, char c);
};

class FSMMap_Bar_end :
    public FSMMap_Default
{
public:
    FSMMap_Bar_end(const char * const name, const int stateId)
    : FSMMap_Default(name, stateId)
    {};

    virtual void symb(FSMSolutionContext<FSMSolution>& context, char c);
};

class FSMMap_OK :
    public FSMMap_Default
{
public:
    FSMMap_OK(const char * const name, const int stateId)
    : FSMMap_Default(name, stateId)
    {};

};

class FSMMap_Error :
    public FSMMap_Default
{
public:
    FSMMap_Error(const char * const name, const int stateId)
    : FSMMap_Default(name, stateId)
    {};

    virtual void symb(FSMSolutionContext<FSMSolution>& context, char c);
};

template<typename DERIVED>
class FSMSolutionContext :
    public statemap::FSMContext
{
public:

    explicit FSMSolutionContext()
    : FSMContext(FSMMap::Init)
    {};

    FSMSolutionContext(const statemap::State& state)
    : FSMContext(state)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline FSMSolution& getOwner()
    {
        return (*static_cast<DERIVED*>(this));
    };

    inline FSMSolutionState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<FSMSolutionState&>(*_state);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void symb(char c)
    {
        getState().symb(*this, c);
    };
};


#endif // FSMSOLUTION_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
