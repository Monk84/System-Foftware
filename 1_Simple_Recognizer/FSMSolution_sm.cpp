//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : FSMSolution.sm
//

#include "FSMSolution.h"
#include "FSMSolution_sm.h"

using namespace statemap;

// Static class declarations.
FSMMap_Init FSMMap::Init("FSMMap::Init", 0);
FSMMap_Name FSMMap::Name("FSMMap::Name", 1);
FSMMap_Bar_size FSMMap::Bar_size("FSMMap::Bar_size", 2);
FSMMap_Size FSMMap::Size("FSMMap::Size", 3);
FSMMap_Bar_hash FSMMap::Bar_hash("FSMMap::Bar_hash", 4);
FSMMap_Hash FSMMap::Hash("FSMMap::Hash", 5);
FSMMap_Bar_end FSMMap::Bar_end("FSMMap::Bar_end", 6);
FSMMap_OK FSMMap::OK("FSMMap::OK", 7);
FSMMap_Error FSMMap::Error("FSMMap::Error", 8);

void FSMSolutionState::EOS(FSMSolutionContext<FSMSolution>& context)
{
    Default(context);
}

void FSMSolutionState::symb(FSMSolutionContext<FSMSolution>& context, char c)
{
    Default(context);
}

void FSMSolutionState::Default(FSMSolutionContext<FSMSolution>& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void FSMMap_Default::EOS(FSMSolutionContext<FSMSolution>& context)
{
    FSMSolution& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(FSMMap::Error);
    }
    catch (...)
    {
        context.setState(FSMMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void FSMMap_Default::symb(FSMSolutionContext<FSMSolution>& context, char c)
{
    FSMSolution& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(FSMMap::Error);
    }
    catch (...)
    {
        context.setState(FSMMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void FSMMap_Init::symb(FSMSolutionContext<FSMSolution>& context, char c)
{

    if ( (c >= 'a' && c <= 'z') ||
                    (c >= '0' && c <= '9') ||
                    (c == '_') || (c == '+') ||
                    (c == '-') || (c == '.') )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(FSMMap::Name);
        context.getState().Entry(context);
    }
    else
    {
         FSMMap_Default::symb(context, c);
    }

}

void FSMMap_Name::symb(FSMSolutionContext<FSMSolution>& context, char c)
{

    if ( (c >= 'a' && c <= 'z') ||
                    (c >= '0' && c <= '9') ||
                    (c == '_') || (c == '+') ||
                    (c == '-') || (c == '.') )
    {
        // No actions.
    }
    else if ( c == '|')

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(FSMMap::Bar_size);
        context.getState().Entry(context);
    }    else
    {
         FSMMap_Default::symb(context, c);
    }

}

void FSMMap_Bar_size::symb(FSMSolutionContext<FSMSolution>& context, char c)
{

    if ( c >= '0' && c <= '9' )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(FSMMap::Size);
        context.getState().Entry(context);
    }
    else
    {
         FSMMap_Default::symb(context, c);
    }

}

void FSMMap_Size::symb(FSMSolutionContext<FSMSolution>& context, char c)
{

    if ( c >= '0' && c <= '9' )
    {
        // No actions.
    }
    else if ( c == '|' )

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(FSMMap::Bar_hash);
        context.getState().Entry(context);
    }    else
    {
         FSMMap_Default::symb(context, c);
    }

}

void FSMMap_Bar_hash::symb(FSMSolutionContext<FSMSolution>& context, char c)
{

    if ( (c >= 'a' && c <= 'f') ||
                    (c >= '0' && c <= '9') )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(FSMMap::Hash);
        context.getState().Entry(context);
    }
    else
    {
         FSMMap_Default::symb(context, c);
    }

}

void FSMMap_Hash::symb(FSMSolutionContext<FSMSolution>& context, char c)
{

    if ( (c >= 'a' && c <= 'f') ||
                    (c >= '0' && c <= '9') )
    {
        // No actions.
    }
    else if ( c == '|' )

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(FSMMap::Bar_end);
        context.getState().Entry(context);
    }    else
    {
         FSMMap_Default::symb(context, c);
    }

}

void FSMMap_Bar_end::symb(FSMSolutionContext<FSMSolution>& context, char c)
{
    FSMSolution& ctxt = context.getOwner();

    if ( c == '/' )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Acceptable();
            context.setState(FSMMap::OK);
        }
        catch (...)
        {
            context.setState(FSMMap::OK);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         FSMMap_Default::symb(context, c);
    }

}

void FSMMap_Error::symb(FSMSolutionContext<FSMSolution>& context, char c)
{


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
